openapi: 3.0.0
info:
  title: Social App # Sample API
  description: Our first Social app -Manish Thorat 
  version: 1.0.1

servers:
  - url: http://localhost:4000/api/v1
    description: localhost version of our app
  - url: https://socialappz.adaptable.app
    description: Adaptable is designed to host almost any web-based app, along with all of the production-ready services your app needs.

components:
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
      # basic access authentication is a method for an HTTP user agent (e.g. a web browser) to provide a user name and password when making a request. In basic HTTP authentication, a request contains a header field in the form of Authorization: Basic <credentials>, where credentials is the Base64 encoding of ID and password joined by a single colon :.
    BearerAuth:
      type: http
      scheme: bearer
    # cookieAuth:         # arbitrary name for the security scheme; will be used in the "security" key later
    #   type: apiKey
    #   in: cookie
    #   name: JSESSIONID  # cookie name
      # HTTP cookie (web cookie, browser cookie) is a small piece of data that a server sends to a user's web browser. The browser may store the 
      # cookie and send it back to the same server with later requests. Typically, an HTTP cookie is used to tell if two requests come from the
      # same browserâ€”keeping a user logged in, for example. It remembers stateful information for the stateless HTTP protocol.

paths:
  /instagram:
    get:
      summary: return username, followers and follows
      responses:
        '200': # status code 
          description: return an object
          content: 
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
                  followers:
                    type: string
                  follows:
                    type: string
                  date:
                    type: string

    post:
      summary: update username, followers and follows
      responses:
        '200': # status code 
          description: return an object
          content: 
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
                  followers:
                    type: string
                  follows:
                    type: string
                  date:
                    type: string

  /{token}:
    get:
      summary: returns whatever is there in parameter
      parameters:
      - name: token
        default: 5
        in: path 
        schema:
          type: string
      responses:
        '200': # status code 
          description: return an object
          content: 
            application/json:
              schema:
                type: object
                properties:
                  param:
                    type: string
                  
  